#!/usr/bin/python3
#
# Pingenator - a super ping tool to get you places
#
# Copyright 2021 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details.
#
# Pingenator's primary use-case is checking internet connectivity by pinging a
# list of hosts.  The pinging is done in parallel, so you can ping a dozen
# hosts once and have the results in 1 second instead of 12.
#

import argparse
import atexit
import math
import multiprocessing
import signal
import subprocess
import sys


# global counter
counter = None

# once we parse our command line arguments, we'll store the results globally
# here
args = None

# FIXME: add build system glue to sed these values in prior to install along
#        with path to python interpreter
#
PROG_NAME="Pingenator"
BIN_NAME="pingenator"
VERSION="0.2.0-dev"

desc = """\
{} v{} - a super ping tool to get you places
Copyright (C) 2021 Michael D Labriola <veggiemike@sourceruckus.org>
""".format(PROG_NAME, VERSION)

epi = """\
For example, to send 4 pings in parallel to each public DNS server provided by
Google, Cloudflare, Quad9, OpenDNS, and Comodo Secure DNS, exluding 8.8.8.8,
using 10.1.99.1 as an alterate gateway, treating a reply-rate of 90% as
success, and get the results all whithin about 1 second:

  {} --dns --exclude 8.8.8.8 --count 4 --success 90 --gateway 10.1.99.1

Or, to ping a couple hosts continuously using an alterate gateway:

  {} -g 192.168.5.1 -c0 8.8.4.4 1.1.1.1

""".format(BIN_NAME, BIN_NAME)


# public dns servers
dns_ips = ["8.8.8.8", "8.8.4.4", # google
           "1.1.1.1", "1.0.0.1", # cloudflare
           "9.9.9.9", "149.112.112.112", # quad9
           "208.67.222.222", "208.67.220.220", # opendns
           "8.26.56.26", "8.20.247.20", # comodo secure dns
           ]


p = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                            prog='pingenator',
                            description=desc.rstrip(),
                            epilog=epi.rstrip()
                            )

p.add_argument('-V', '--version', action='version',
               version="{} version {}".format(PROG_NAME, VERSION))

p.add_argument('-v', '--verbose', action='count', default=1, dest='verbosity',
               help="""Be verbose.  Can be supplied multiple times for
                    increased levels of verbosity.""")

p.add_argument('-q', '--quiet', action='store_true',
               help="""Be quiet.  Only output is "N of N reached".""")

# FIXME: add type=ipaddr type checking... could just check that we can encode
#        the IP as either an IPv4 or IPv6 address, but we'll have to allow dns
#        resolution too
#
#        this would be really nice, because spotting a typo in the output after
#        waiting a few seconds will be hard on tired eyes.
#
p.add_argument('ip_list', metavar='IPADDR', nargs='*',
               help="""IP address to ping.""")

p.add_argument('-d', '--dns', action='store_true', dest='use_dns_ips',
               help="""Additionally use built-in IPs of Public DNS servers
                    provided by Google, Cloudflare, Quad9, OpenDNS, and
                    Comodo Secure DNS.""")

p.add_argument('-e', '--exclude', action='append', metavar='IP',
               dest='exclude_ips', default=[],
               help="""Do not ping specified IP, even if it's been specified.
                    This can be used to exclude IPs added via the --dns flag.
                    Can be specified multiple times.""")

p.add_argument('-c', '--count', metavar='N', type=int, default=1,
               help="""Send N ping packets.  Default is 1.  Specifying 0 will
                    cause each ping subprocess to ping continiously.""")

p.add_argument('-s', '--success', metavar='PERCENT', type=int, default=0,
               dest='success_percent',
               help="""Return successfully if percentange reached is at least
                    PERCENT.  Special case 0 means success if any responses are
                    received.  Default is 0.""")

p.add_argument('-g', '--gateway', metavar='IP',
               help="""Use the specified gateway IP for outgoing pings.  This
                    causes a static route to be added to the system for each IP
                    to be pinged, so admin privileges are required.  Routes are
                    removed at the end, so there shouldn't be any lasting
                    effect, but care should be taken that you don't
                    accidentally make an important host unreachable while
                    testing (i.e., don't use a gateway to test an alternate WAN
                    interface pinging the DNS server your system is currently
                    using).""")



def check_ip(ip):
    go = ["ping"]
    if args.count > 0:
        # FIXME: '-w1' vs '-c1 -W1'
        go.append("-w1")
        out = subprocess.PIPE
    else:
        out = None
    go.append(ip)
    status = subprocess.run(go, stdout=out, stderr=out)
    if status.returncode == 0:
        return True, status
    return False, status


def worker(ip):
    reachable, status = check_ip(ip)
    with counter.get_lock():
        if reachable:
            counter.value += 1
        # we do this here, with counter locked, to synchronize stdout from
        # within our subprocesses.
        if args.verbosity > 1:
            print(status)
        elif args.verbosity > 0:
            print(status.stdout.decode())


@atexit.register
def rm_routes():
    # if we haven't initialized args or added rm_routes to it, don't blow up,
    # just return quietly.
    if not args or "rm_routes" not in args:
        return

    for go in args.rm_routes:
        if args.verbosity > 0:
            print(go)
        # keep going if there's an error, we're cleaning up
        subprocess.run(go.split())
    if args.verbosity > 2:
        subprocess.run(["ip", "route"])


def sigint_handler(signum, frame):
    sys.exit(1)



# NOTE: if we want to call this from the interpreter for testing, we'll have to
#       forge sys.argv
#
def main():
    global args
    args = p.parse_args()
    if args.quiet:
        args.verbosity = 0
    if args.verbosity > 1:
        print(args)

    # append dns_ips if needed
    if args.use_dns_ips:
        if args.verbosity > 1:
            print("adding to ip_list:", dns_ips)
        args.ip_list.extend(dns_ips)

    # remove excluded ips from ip_list
    for ip in args.exclude_ips:
        if args.verbosity > 1:
            print("removing from ip_list:", ip)
        try:
            args.ip_list.remove(ip)
        except:
            pass

    # make sure we have an ip_list
    if len(args.ip_list) == 0:
        print("ERROR: no IPs specified")
        sys.exit(1)

    # add routes if needed
    args.rm_routes = []
    if args.verbosity > 2:
        subprocess.run(["ip", "route"])
    if args.gateway:
        for ip in args.ip_list:
            go = "ip route add {}/32 via {}".format(ip, args.gateway)
            if args.verbosity > 0:
                print(go)
            subprocess.run(go.split()).check_returncode()
            # populate our rm_routes list so we can clean things up later
            #
            # NOTE: This list is shoved into global args so that our atexit
            #       handler can remove the routes.
            #
            args.rm_routes.append("ip route del {}/32 via {}".format(ip, args.gateway))
    if args.verbosity > 2:
        subprocess.run(["ip", "route"])

    # multiply ip_list if needed
    x = args.ip_list[:]
    if args.count > 0:
        for i in range(args.count-1):
            args.ip_list += x
    else:
        # we're going to ping continuously, catch KeyboardInterrupt so the user
        # doesn't have to look at a giant traceback when they ctrl-c to kill
        # the ping
        signal.signal(signal.SIGINT, sigint_handler)

    # calculate success_count
    if args.success_percent == 0:
        args.success_count = 1
    else:
        # number of packets to consider success, round up
        args.success_count = math.ceil(len(args.ip_list) * args.success_percent/100.0)

    if args.verbosity > 1:
        print("final ip_list:", args.ip_list)
        print("sending", len(args.ip_list), "packets, treating at least", args.success_count, "replies as success.")

    # create the counter object
    global counter
    counter = multiprocessing.Value('i', 0)
    if args.verbosity > 1:
        print(counter)

    # create a process pool
    pool = multiprocessing.Pool(len(args.ip_list))
    i = pool.map_async(worker, args.ip_list, chunksize=1)
    # wait for them all to finish
    i.wait()

    # compare to success_count
    if counter.value >= args.success_count:
        msg = "SUCCESS:"
        retval=0
    else:
        msg = "FAIL:"
        retval=1
    print(msg, counter.value, "of", len(args.ip_list), "reached")
    return retval



if __name__ == "__main__":
    sys.exit(main())
