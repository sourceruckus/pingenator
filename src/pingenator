#!/usr/bin/python3

import argparse
import subprocess
import multiprocessing


# global counter
counter = None

# once we parse our command line arguments, we'll store the results globally
# here
args = None

# FIXME: add build system glue to sed these values in prior to install
PROG_NAME="Pingenator"
BIN_NAME="pingenator"
VERSION="0.1.0"

desc = """\
{} v{} - a super ping tool to get you places
Copyright (C) 2021 Michael D Labriola <veggiemike@sourceruckus.org>
""".format(PROG_NAME, VERSION)

epi = """\
For example, to check reachability of public DNS servers provided by Google,
Cloudflare, Quad9, OpenDNS, and Comodo Secure DNS:

    {} 8.8.8.8 8.8.4.4 1.1.1.1 1.0.0.1 9.9.9.9 149.112.112.112 \\
        208.67.222.222 208.67.220.220 8.26.56.26 8.20.247.20

""".format(BIN_NAME)


p = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                            prog='pingenator',
                            description=desc.rstrip(),
                            epilog=epi.rstrip()
                            )

p.add_argument('-V', '--version', action='version',
               version="{} version {}".format(PROG_NAME, VERSION))

p.add_argument('-v', '--verbose', action='count', default=1, dest='verbosity',
               help="""Be verbose.  Can be supplied multiple times for
                    increased levels of verbosity.""")

p.add_argument('-q', '--quiet', action='store_true',
               help="""Be quiet.  Only output is "N of N reached".""")

# FIXME: add type=ipaddr type checking... could just check that we can encode
#        the IP as either an IPv4 or IPv6 address
#
p.add_argument('ip_list', metavar='IPADDR', nargs='*',
               help="""IP address to ping.""")


#p.add_argument('-n', '--dry-run', action='store_true',
#               help="""Don't actualy do anything, just print what would have
#               been done.  Go
#               through the motions, but Feature stage funcs are not
#               executed.""")

#p.add_argument('--root', metavar='ROOTDIR',
#               help="""Specifies that we should operate on a filesystem rooted
#               at ROOTDIR.
#               This is similar to automake's DESTDIR variable, or srp2's
#               SRP_ROOT_PREFIX variable""")



def check_ip(ip):
    status = subprocess.run(["ping", "-w1", ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if status.returncode == 0:
        return True, status
    return False, status


def worker(ip):
    reachable, status = check_ip(ip)
    with counter.get_lock():
        if reachable:
            counter.value += 1
        # we do this here, with counter locked, to synchronize stdout from
        # within our subprocesses.
        if args.verbosity > 1:
            print(status)
        elif args.verbosity > 0:
            print(status.stdout.decode())



# NOTE: if we want to call this from the interpreter for testing, we'll have to
#       forge sys.argv
#
def main():
    global args
    args = p.parse_args()
    if args.quiet:
        args.verbosity = 0
    if args.verbosity > 1:
        print(args)

    if len(args.ip_list) == 0:
        print("ERROR: no IPs specified")
        sys.exit(1)

    global counter
    counter = multiprocessing.Value('i', 0)
    if args.verbosity > 1:
        print(counter)

    pool = multiprocessing.Pool(len(args.ip_list))
    i = pool.map_async(worker, args.ip_list, chunksize=1)
    i.wait()
    
    print(counter.value, "of", len(args.ip_list), "reached")




if __name__ == "__main__":
    main()
